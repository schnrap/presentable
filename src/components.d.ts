/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface PresentableAddon {}
  interface PresentableAddonAttributes extends StencilHTMLAttributes {}

  interface PresentableFooter {
    'pageNumber': number;
  }
  interface PresentableFooterAttributes extends StencilHTMLAttributes {
    'pageNumber'?: number;
  }

  interface PresentableHeader {
    'pageNumber': number;
  }
  interface PresentableHeaderAttributes extends StencilHTMLAttributes {
    'pageNumber'?: number;
  }

  interface PresentablePresentation {}
  interface PresentablePresentationAttributes extends StencilHTMLAttributes {}

  interface PresentableSlide {
    'deselect': () => void;
    'noFooter': boolean;
    'noHeader': boolean;
    'select': () => void;
  }
  interface PresentableSlideAttributes extends StencilHTMLAttributes {
    'noFooter'?: boolean;
    'noHeader'?: boolean;
  }

  interface PresentableToday {}
  interface PresentableTodayAttributes extends StencilHTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
    'PresentableAddon': Components.PresentableAddon;
    'PresentableFooter': Components.PresentableFooter;
    'PresentableHeader': Components.PresentableHeader;
    'PresentablePresentation': Components.PresentablePresentation;
    'PresentableSlide': Components.PresentableSlide;
    'PresentableToday': Components.PresentableToday;
  }

  interface StencilIntrinsicElements {
    'presentable-addon': Components.PresentableAddonAttributes;
    'presentable-footer': Components.PresentableFooterAttributes;
    'presentable-header': Components.PresentableHeaderAttributes;
    'presentable-presentation': Components.PresentablePresentationAttributes;
    'presentable-slide': Components.PresentableSlideAttributes;
    'presentable-today': Components.PresentableTodayAttributes;
  }


  interface HTMLPresentableAddonElement extends Components.PresentableAddon, HTMLStencilElement {}
  var HTMLPresentableAddonElement: {
    prototype: HTMLPresentableAddonElement;
    new (): HTMLPresentableAddonElement;
  };

  interface HTMLPresentableFooterElement extends Components.PresentableFooter, HTMLStencilElement {}
  var HTMLPresentableFooterElement: {
    prototype: HTMLPresentableFooterElement;
    new (): HTMLPresentableFooterElement;
  };

  interface HTMLPresentableHeaderElement extends Components.PresentableHeader, HTMLStencilElement {}
  var HTMLPresentableHeaderElement: {
    prototype: HTMLPresentableHeaderElement;
    new (): HTMLPresentableHeaderElement;
  };

  interface HTMLPresentablePresentationElement extends Components.PresentablePresentation, HTMLStencilElement {}
  var HTMLPresentablePresentationElement: {
    prototype: HTMLPresentablePresentationElement;
    new (): HTMLPresentablePresentationElement;
  };

  interface HTMLPresentableSlideElement extends Components.PresentableSlide, HTMLStencilElement {}
  var HTMLPresentableSlideElement: {
    prototype: HTMLPresentableSlideElement;
    new (): HTMLPresentableSlideElement;
  };

  interface HTMLPresentableTodayElement extends Components.PresentableToday, HTMLStencilElement {}
  var HTMLPresentableTodayElement: {
    prototype: HTMLPresentableTodayElement;
    new (): HTMLPresentableTodayElement;
  };

  interface HTMLElementTagNameMap {
    'presentable-addon': HTMLPresentableAddonElement
    'presentable-footer': HTMLPresentableFooterElement
    'presentable-header': HTMLPresentableHeaderElement
    'presentable-presentation': HTMLPresentablePresentationElement
    'presentable-slide': HTMLPresentableSlideElement
    'presentable-today': HTMLPresentableTodayElement
  }

  interface ElementTagNameMap {
    'presentable-addon': HTMLPresentableAddonElement;
    'presentable-footer': HTMLPresentableFooterElement;
    'presentable-header': HTMLPresentableHeaderElement;
    'presentable-presentation': HTMLPresentablePresentationElement;
    'presentable-slide': HTMLPresentableSlideElement;
    'presentable-today': HTMLPresentableTodayElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
